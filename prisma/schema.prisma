// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  name            String?        @unique
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  followedArtists ArtistFollow[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  spotifyArtistId String         @id
  artistName      String
  releases        Release[]
  followers       ArtistFollow[]

  @@unique([spotifyArtistId])
}

model Release {
  spotifyReleaseId  String   @id
  artist            Artist   @relation(fields: [artistId], references: [spotifyArtistId])
  artistId          String
  releaseName       String
  releaseDate       DateTime
  spotifyReleaseUrl String

  @@unique([spotifyReleaseUrl])
}

// Junction table for many-to-many relation between User and Artist
model ArtistFollow {
  user     User   @relation(fields: [userId], references: [name])
  userId   String
  artist   Artist @relation(fields: [artistId], references: [spotifyArtistId])
  artistId String

  @@id([userId, artistId])
}
